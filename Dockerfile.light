# Fase 1: Instalação das dependências
FROM node:18-alpine AS deps
WORKDIR /app

# Instala as ferramentas necessárias
RUN apk add --no-cache python3 make g++

# Copia apenas os arquivos necessários para instalar as dependências
COPY gbp-main/package.json gbp-main/package-lock.json ./

# Instala as dependências de produção primeiro
RUN npm ci --only=production --no-audit --prefer-offline

# Fase 2: Build da aplicação
FROM node:18-alpine AS builder
WORKDIR /app

# Copia as dependências de produção
COPY --from=deps /app/node_modules ./node_modules

# Copia o restante do código-fonte
COPY gbp-main/ .

# Configura o Node.js para usar menos memória
ENV NODE_OPTIONS=--max_old_space_size=2048

# Gera o build de produção
RUN npm run build -- --mode production --no-clean

# Fase 3: Imagem final
FROM nginx:stable-alpine

# Remove a configuração padrão do Nginx
RUN rm -f /etc/nginx/conf.d/default.conf

# Copia a configuração personalizada do Nginx
COPY gbp-main/nginx.conf /etc/nginx/conf.d/default.conf

# Copia os arquivos de build
COPY --from=builder /app/dist /usr/share/nginx/html

# Expõe a porta 80
EXPOSE 80

# Inicia o Nginx
CMD ["nginx", "-g", "daemon off;"]
