# Multi-stage build otimizado
FROM node:22-alpine AS builder

# Configura o diretório de trabalho
WORKDIR /app

# Copia os arquivos de definição de dependências
COPY package*.json ./
COPY tsconfig.json ./
COPY tsconfig.node.json ./
COPY tsconfig.app.json ./
COPY vite.config.ts ./
COPY postcss.config.js ./
COPY tailwind.config.js ./

# Instala as dependências (incluindo as de desenvolvimento para o build)
RUN npm ci --no-audit --prefer-offline --no-fund --include=dev

# Copia o código-fonte e arquivos de configuração
COPY index.html .
COPY src ./src
COPY public ./public

# Constrói a aplicação
RUN npm run build

# Produção
FROM nginx:1.27-alpine

# Instala curl para healthcheck
RUN apk add --no-cache curl

# Copia os arquivos construídos
COPY --from=builder /app/dist /usr/share/nginx/html

# Copia a configuração do Nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Configura healthcheck
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost/ || exit 1

# Configura permissões
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Executa como usuário não-root
USER nginx

# Expõe a porta 80
EXPOSE 80

# Inicia o Nginx
CMD ["nginx", "-g", "daemon off;"]
