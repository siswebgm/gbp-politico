# Etapa de construção com Node.js
FROM node:18-alpine as deps

WORKDIR /app

# Configurações para otimização de memória e cache
RUN npm config set fetch-retries 3 \
    && npm config set fetch-retry-mintimeout 30000 \
    && npm config set prefer-offline true \
    && npm config set update-notifier false \
    && npm config set fund false

# Copia os arquivos de configuração e dependências
COPY gbp-main/package.json gbp-main/package-lock.json ./

# Instala as dependências
RUN npm install --no-audit --prefer-offline --no-fund

# Etapa de build
FROM node:18-alpine as build

WORKDIR /app

# Copia os arquivos de configuração
COPY gbp-main/package.json gbp-main/package-lock.json ./
COPY gbp-main/tsconfig.json ./
COPY gbp-main/vite.config.ts ./
COPY gbp-main/postcss.config.js ./
COPY gbp-main/tailwind.config.js ./

# Instala apenas as dependências necessárias para o build
RUN npm ci --only=production --no-audit --prefer-offline --no-fund

# Copia o código-fonte
COPY gbp-main/src ./src
COPY gbp-main/public ./public

# Configura o Node.js para usar menos memória
ENV NODE_OPTIONS=--max_old_space_size=2048

# Executa o build
RUN npm run build:conservative

# Etapa de produção
FROM nginx:stable-alpine

# Remove a configuração padrão do Nginx
RUN rm -f /etc/nginx/conf.d/default.conf

# Copia a configuração personalizada do Nginx
COPY gbp-main/nginx.conf /etc/nginx/conf.d/default.conf

# Copia apenas os arquivos de build necessários
COPY --from=build /app/gbp-main/dist /usr/share/nginx/html

# Configura permissões
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html && \
    rm -rf /var/cache/apk/* /tmp/*

# Health check
HEALTHCHECK --interval=30s --timeout=3s \
  CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

# Expõe a porta 80
EXPOSE 80

# Inicia o Nginx
CMD ["nginx", "-g", "daemon off;"]
